@host = localhost
@port = 8080
@baseUrl = http://{{host}}:{{port}}/api/v1

### [매장] 회원가입
POST {{baseUrl}}/merchant/signup
Content-Type: application/json

{
  "name": "테스트매장",
  "email": "test@test.com",
  "password": "Tset1234!!"
}

### [매장] 로그인
POST {{baseUrl}}/merchant/auth/login
Content-Type: application/json

{
  "email": "starbucks1@corp.com",
  "password": "Test1234!!"
}

> {%
    // 응답 헤더에서 'Authorization' 값을 가져와 'token' 변수에 저장합니다.
    client.global.set("store_token", response.headers.valueOf("Authorization"));
%}

### [매장] 현재 주문 목록 조회
# 1-2 단계에서 생성한 주문이 목록에 보이는지 확인합니다.
GET {{baseUrl}}/merchant/1/orders/current
Authorization: {{store_token}}
Accept: application/json

### [매장] 주문 상태 변경 (PREPARING 으로)
# 방금 생성된 주문(ID는 'orderId' 변수에 저장됨)의 상태를 'PREPARING'으로 변경합니다.
PATCH {{baseUrl}}/merchant/1/orders/4/status
Content-Type: application/json
Authorization: {{store_token}}

{
  "newStatus": "PREPARING"
}

### [매장] 특정 주문 상세 조회
# 상태가 변경된 주문의 상세 내역을 확인합니다.
GET {{baseUrl}}/merchant/1/orders/4
Authorization: {{store_token}}
Accept: application/json

### [매장] 주문 상태 변경 (COMPLETED 로)
# 테스트를 위해 주문을 'COMPLETED' 상태로 변경하여 과거 내역으로 만듭니다.
PATCH {{baseUrl}}/merchant/1/orders/4/status
Content-Type: application/json
Authorization: {{store_token}}

{
  "newStatus": "COMPLETED"
}

### [매장] 과거 주문 내역 조회
# 방금 완료 처리된 주문이 과거 내역에 보이는지 확인합니다.
GET {{baseUrl}}/merchant/1/orders/history
Authorization: {{store_token}}
Accept: application/json