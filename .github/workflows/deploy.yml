name: Auto deploy Docker

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  # CI: 빌드 및 테스트 (PR과 push 모두에서 실행)
  continuous-integration:
    runs-on: ubuntu-latest
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: JDK 21 셋팅
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Gradle caching - 빌드 시간 향상
      - name: 빌드 시간 단축을 위한 gradle 캐싱
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: YML 파일 생성 및 내용 복사
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_DEV_YML }}"  | base64 --decode > src/main/resources/application-dev.yml
          find src

      - name: 빌드를 위해 gradlew 실행 권한 부여
        run: chmod +x gradlew

      - name: Gradle을 이용해 프로젝트 파일을 jar 파일로 빌드
        run: ./gradlew clean build

      # 테스트 실행 (선택사항 - 필요시 추가)
      - name: 테스트 실행
        run: ./gradlew test

  # CD: 배포 (develop 브랜치 push 시에만 실행)
  continuous-deployment:
    runs-on: ubuntu-latest
    needs: continuous-integration  # CI 성공 후에만 실행
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'  # develop 브랜치 push 시에만 실행
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: JDK 21 셋팅
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Gradle caching - 빌드 시간 향상
      - name: 빌드 시간 단축을 위한 gradle 캐싱
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: YML 파일 생성 및 내용 복사
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_DEV_YML }}"  | base64 --decode > src/main/resources/application-dev.yml
          find src

      - name: 빌드를 위해 gradlew 실행 권한 부여
        run: chmod +x gradlew

      - name: Gradle을 이용해 프로젝트 파일을 jar 파일로 빌드
        run: ./gradlew clean build

      - name: AWS 인증 정보 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.MY_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.MY_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.MY_AWS_REGION }}

      - name: Amazon ECR에 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 이미지를 빌드, 태그 설정 한 뒤 Amazon ECR로 푸쉬
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.MY_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker buildx build --platform=linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Dockerrun.aws.json에서 이미지 이름 교체
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.MY_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          sed -i "s|<IMAGE_NAME>|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" Dockerrun.aws.json

      - name: 현재 시간정보 획득
        uses: josStorer/get-current-time@v2
        id: current-time
        with:
          format: YYYYMMDD_HH-mm-ss
          utcOffset: "+09:00"

      - name: 배포 패키지 생성
        run: |
          mkdir -p deploy
          cp Dockerrun.aws.json deploy/Dockerrun.aws.json
          cd deploy && zip -r deploy.zip .

      - name: Elastic Beanstalk에 배포
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          aws_access_key: ${{ secrets.MY_AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.MY_AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.MY_EB_APP_NAME }}
          environment_name: ${{ secrets.MY_EB_ENV_NAME }}
          version_label: earth-docker-${{steps.current-time.outputs.formattedTime}}
          region: ${{ secrets.MY_AWS_REGION }}
          deployment_package: deploy/deploy.zip
          wait_for_environment_recovery: 200